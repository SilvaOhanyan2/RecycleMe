# -*- coding: utf-8 -*-
"""RecycleMe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PO1TmUT_elwbDZWKaaWrpvXcszNCWxG8
"""

import pandas as pd
from bs4 import BeautifulSoup
import requests

product_list = []

# Define the URL of the page to scrape
url = "https://www.sas.am/catalog/sakhar_zamenitel_sakhara/"
response = requests.get(url)

if response.status_code == 200:  # Check if request was successful
    soup = BeautifulSoup(response.content, "html.parser")
    print("Page content fetched successfully.")

    # Locate the product grid
    product_grid = soup.find("div", class_="catalog__grid grid")
    if product_grid:
        print("Catalog grid found.")

        # Locate each product within the grid
        each_product = product_grid.find_all("div", class_="catalog__col col-xl-3 col-lg-3 col-md-4 col-sm-6 col-xs-12")
        print(f"Found {len(each_product)} products.")

        for item in each_product:
            # Extract product details
            product_name = item.find("div", class_="product__name hidden visible-sm")  # Updated class for name
            product_price = item.find("div", class_="product__price-wrap flc")  # Updated class for price
            product_code = item.find("input", {"name": "id"})  # Hidden input field for product code
            product_availability = item.find("div", class_="product__availability")  # Adjust based on actual class

            # Clean and process the price
            price = product_price.text.strip() if product_price else 'N/A'
            price = price.replace(" դր", "").replace(",", "").strip()  # Remove currency and clean format
            price = int(price) if price.isdigit() else price  # Convert to integer if it's numeric

            # Store the data
            product_data = {
                'Ապրանքի անվանում': product_name.text.strip() if product_name else 'N/A',
                'Գին': price,
                'Ապրանքի կոդ': product_code["value"] if product_code else 'N/A',
                'Հասանելիություն': 'Available' if product_price else 'Unavailable',  # Example for availability
            }
            product_list.append(product_data)
    else:
        print("Product grid not found.")
else:
    print(f"Failed to fetch the page. Status code: {response.status_code}")

# Create a DataFrame from the scraped data
df = pd.DataFrame(product_list)

# Display the DataFrame
print("\nScraped Products:")
print(df)

# Optionally, save to a CSV file
df.to_csv("scraped_products.csv", index=False, encoding='utf-8')

import pandas as pd
from bs4 import BeautifulSoup
import requests

product_list = []

# Define the URL of the page to scrape
url = "https://www.sas.am/catalog/sakhar_zamenitel_sakhara/"
response = requests.get(url)

if response.status_code == 200:  # Check if request was successful
    soup = BeautifulSoup(response.content, "html.parser")
    print("Page content fetched successfully.")

    # Locate the product grid
    product_grid = soup.find("div", class_="catalog__grid grid")
    if product_grid:
        print("Catalog grid found.")

        # Locate each product within the grid
        each_product = product_grid.find_all("div", class_="catalog__col col-xl-3 col-lg-3 col-md-4 col-sm-6 col-xs-12")
        print(f"Found {len(each_product)} products.")

        for item in each_product:
            # Extract product details
            product_name = item.find("div", class_="product__name hidden visible-sm")  # Updated class for name
            product_price = item.find("div", class_="product__price-wrap flc")  # Updated class for price
            product_code = item.find("input", {"name": "id"})  # Hidden input field for product code
            product_availability = item.find("div", class_="product__availability")  # Adjust based on actual class

            # Clean and process the price
            price = product_price.text.strip() if product_price else 'N/A'
            price = price.replace(" դր", "").replace(",", "").strip()  # Remove currency and clean format
            price = int(price) if price.isdigit() else price  # Convert to integer if it's numeric

            # Store the data
            product_data = {
                'Ապրանքի անվանում': product_name.text.strip() if product_name else 'N/A',
                'Գին': price,
                'Ապրանքի կոդ': product_code["value"] if product_code else 'N/A',
                'Հասանելիություն': 'Available' if product_price else 'Unavailable',  # Example for availability
            }
            product_list.append(product_data)
    else:
        print("Product grid not found.")
else:
    print(f"Failed to fetch the page. Status code: {response.status_code}")

# Create a DataFrame from the scraped data
df = pd.DataFrame(product_list)

# Display the DataFrame
print("\nScraped Products:")
print(df)

# Optionally, save to a CSV file
df.to_csv("scraped_products.csv", index=False, encoding='utf-8')

import pandas as pd
from bs4 import BeautifulSoup
import requests

product_list = []

# Define the URL of the page to scrape
url = "https://www.sas.am/catalog/bakaleya_diabet/"
response = requests.get(url)

if response.status_code == 200:  # Check if request was successful
    soup = BeautifulSoup(response.content, "html.parser")
    print("Page content fetched successfully.")

    # Locate the product grid
    product_grid = soup.find("div", class_="catalog__grid grid")
    if product_grid:
        print("Catalog grid found.")

        # Locate each product within the grid
        each_product = product_grid.find_all("div", class_="catalog__col col-xl-3 col-lg-3 col-md-4 col-sm-6 col-xs-12")
        print(f"Found {len(each_product)} products.")

        for item in each_product:
            # Extract product details
            product_name = item.find("div", class_="product__name hidden visible-sm")  # Updated class for name
            product_price = item.find("div", class_="product__price-wrap flc")  # Updated class for price
            product_code = item.find("input", {"name": "id"})  # Hidden input field for product code
            product_availability = item.find("div", class_="product__availability")  # Adjust based on actual class

            # Clean and process the price
            price = product_price.text.strip() if product_price else 'N/A'
            price = price.replace(" դր", "").replace(",", "").strip()  # Remove currency and clean format
            price = int(price) if price.isdigit() else price  # Convert to integer if it's numeric

            # Store the data
            product_data = {
                'Ապրանքի անվանում': product_name.text.strip() if product_name else 'N/A',
                'Գին': price,
                'Ապրանքի կոդ': product_code["value"] if product_code else 'N/A',
                'Հասանելիություն': 'Available' if product_price else 'Unavailable',  # Example for availability
            }
            product_list.append(product_data)
    else:
        print("Product grid not found.")
else:
    print(f"Failed to fetch the page. Status code: {response.status_code}")

# Create a DataFrame from the scraped data
df = pd.DataFrame(product_list)

# Display the DataFrame
print("\nScraped Products:")
print(df)

# Optionally, save to a CSV file
df.to_csv("scraped_products.csv", index=False, encoding='utf-8')

import pandas as pd
from bs4 import BeautifulSoup
import requests

product_list = []

# Define the URL of the page to scrape
url = "https://www.sas.am/catalog/napitki/"
response = requests.get(url)

if response.status_code == 200:  # Check if request was successful
    soup = BeautifulSoup(response.content, "html.parser")
    print("Page content fetched successfully.")

    # Locate the product grid
    product_grid = soup.find("div", class_="catalog__grid grid")
    if product_grid:
        print("Catalog grid found.")

        # Locate each product within the grid
        each_product = product_grid.find_all("div", class_="catalog__col col-xl-3 col-lg-3 col-md-4 col-sm-6 col-xs-12")
        print(f"Found {len(each_product)} products.")

        for item in each_product:
            # Extract product details
            product_name = item.find("div", class_="product__name hidden visible-sm")  # Updated class for name
            product_price = item.find("div", class_="product__price-wrap flc")  # Updated class for price
            product_code = item.find("input", {"name": "id"})  # Hidden input field for product code
            product_availability = item.find("div", class_="product__availability")  # Adjust based on actual class

            # Clean and process the price
            price = product_price.text.strip() if product_price else 'N/A'
            price = price.replace(" դր", "").replace(",", "").strip()  # Remove currency and clean format
            price = int(price) if price.isdigit() else price  # Convert to integer if it's numeric

            # Store the data
            product_data = {
                'Ապրանքի անվանում': product_name.text.strip() if product_name else 'N/A',
                'Գին': price,
                'Ապրանքի կոդ': product_code["value"] if product_code else 'N/A',
                'Հասանելիություն': 'Available' if product_price else 'Unavailable',  # Example for availability
            }
            product_list.append(product_data)
    else:
        print("Product grid not found.")
else:
    print(f"Failed to fetch the page. Status code: {response.status_code}")

# Create a DataFrame from the scraped data
df = pd.DataFrame(product_list)

# Display the DataFrame
print("\nScraped Products:")
print(df)

# Optionally, save to a CSV file
df.to_csv("scraped_products.csv", index=False, encoding='utf-8')

import pandas as pd
from bs4 import BeautifulSoup
import requests

product_list = []

# Define the URL of the page to scrape
url = "https://www.sas.am/catalog/sladosti_i_deserty/"
response = requests.get(url)

if response.status_code == 200:  # Check if request was successful
    soup = BeautifulSoup(response.content, "html.parser")
    print("Page content fetched successfully.")

    # Locate the product grid
    product_grid = soup.find("div", class_="catalog__grid grid")
    if product_grid:
        print("Catalog grid found.")

        # Locate each product within the grid
        each_product = product_grid.find_all("div", class_="catalog__col col-xl-3 col-lg-3 col-md-4 col-sm-6 col-xs-12")
        print(f"Found {len(each_product)} products.")

        for item in each_product:
            # Extract product details
            product_name = item.find("div", class_="product__name hidden visible-sm")  # Updated class for name
            product_price = item.find("div", class_="product__price-wrap flc")  # Updated class for price
            product_code = item.find("input", {"name": "id"})  # Hidden input field for product code
            product_availability = item.find("div", class_="product__availability")  # Adjust based on actual class

            # Clean and process the price
            price = product_price.text.strip() if product_price else 'N/A'
            price = price.replace(" դր", "").replace(",", "").strip()  # Remove currency and clean format
            price = int(price) if price.isdigit() else price  # Convert to integer if it's numeric

            # Store the data
            product_data = {
                'Ապրանքի անվանում': product_name.text.strip() if product_name else 'N/A',
                'Գին': price,
                'Ապրանքի կոդ': product_code["value"] if product_code else 'N/A',
                'Հասանելիություն': 'Available' if product_price else 'Unavailable',  # Example for availability
            }
            product_list.append(product_data)
    else:
        print("Product grid not found.")
else:
    print(f"Failed to fetch the page. Status code: {response.status_code}")

# Create a DataFrame from the scraped data
df = pd.DataFrame(product_list)

# Display the DataFrame
print("\nScraped Products:")
print(df)

# Optionally, save to a CSV file
df.to_csv("scraped_products.csv", index=False, encoding='utf-8')

import sqlite3
import pandas as pd

# Example scraped data in a dictionary format
data = {
    "Ապրանքի անվանում": [
        "Շաքարի փոխարինիչ «Novasweet Стевия» 200գ",
        "Քաղցրացուցիչ հեղուկ «Bionova Стевия Nature» 80գ",
        # Add the rest of your product names here...
    ],
    "Գին": [
        "2 990.", "1 850.",
        # Add the rest of your prices here...
    ],
    "Ապրանքի կոդ": [
        48158, 48156,
        # Add the rest of your product codes here...
    ],
    "Հասանելիություն": [
        "Available", "Available",
        # Add the rest of your availability statuses here...
    ]
}

# Convert data to a pandas DataFrame
df = pd.DataFrame(data)

# Clean the 'Գին' column by removing non-numeric characters and converting to integers
df["Գին"] = df["Գին"].str.replace(r"[^\d]", "", regex=True).astype(int)

# Connect to SQLite database (creates the database if it doesn't exist)
conn = sqlite3.connect("scraped_data.db")
cursor = conn.cursor()

# Create a table
cursor.execute('''
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    price INTEGER,
    code INTEGER,
    availability TEXT
)
''')

# Insert data into the database using pandas
df.rename(columns={
    "Ապրանքի անվանում": "name",
    "Գին": "price",
    "Ապրանքի կոդ": "code",
    "Հասանելիություն": "availability"
}, inplace=True)

df.to_sql("products", conn, if_exists="append", index=False)

# Fetch and display data to confirm it was inserted correctly
cursor.execute("SELECT * FROM products")
rows = cursor.fetchall()
for row in rows:
    print(row)

# Close the connection
conn.close()

print("Database 'scraped_data.db' created and data inserted successfully!")